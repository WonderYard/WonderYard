/**
//Idea di classe che controlla la struttura datai strutturata come parser discendente
//https://code.tutsplus.com/tutorials/validating-data-with-json-schema-part-1--cms-25343
function data_validator(data) {
    this.data = data;
}

data_validator.prototype.check = function() {
    //TODO
    if(this.data.states) stateDefn(this.data.states);
    if(this.data.nbhdDefn) nbhdDefn(this.data.nbhdDefn);
    if(this.data.classes) classDefn(this.data.classes);

    function stateDefn(data) {
        if(!data.state_id) throw new Error("state_id undefined");
        if(!(data.image || data.color)) throw new Error("image or color not defined");
        if(data.rules) rule(data.rules);
        else throw new Error("Undefined rules");
        if(class_list) classDefn(data.class_list);
    }

}
**/


{
    "id": "StateDefn",
    "type": "object",
    "properties":
    {
        "state_id": {
            "type" : "integer"
        },

        "color": {
            "type": "string"
        },
        "image": {
            "type": "string"
        },
        "rules": {
            "type": "array"
            "items": {
                "$ref" = "#Rule"
            }
        },
        "class_list": {
            "type": "array",
            "items": {
                "$ref" = "#ClassDefn"
            }
        }
    }
}


{
    "id": "Rule",
    "type": "object",
    "properties":
    {
        "evolve_to": {
            "$ref": "#StateRef"
        },
        "conditions": {
            "$ref": "#Expression"
        }
    }
}


{
    "id": "StateRef",
    "type": "object",
    "properties":
    {
        "state_id": {
            "type": "integer"
        },
        "me": {
            "type": "boolean"
        },
        "coordinate": {
            "$ref": "#Point"
        }
    }
}

{
    "id": "Expression",
    "type": "object",
    "properties": {
        "term": {
            "$ref": "#ExTerm"
            
        },
        "subexp": {
            "$ref": "#Subexpression"
        },
        "negate": {
            "enum": [true]
        }
    }

}

{
    "id": "Subexpression",
    "type": "object",
    "properties": {
        "operator": {
            "enum": ["AND", "OR", "XOR"]
        },
        "right_chd": {
            "$ref": "Expression"
        },
        "left_chd": {
            "$ref": "Expression"
        }
    }
}

{
    "id": "ExTerm",
    "type": "object",
    "properties": {
        "cond": {
            "$ref": "#Condition"
                
        },
        "bool_lit": {
            "type": "boolean"
        }
    }
}

{
    "id": "Condition",
    "type": "object",
    "properties": {
        "adjacency": {
            "$ref": "#Adjacency"
            
        },
        "relational": {
            "$ref": "#Relational"
        }
    }
}

{
    "id": "Adjacency",
    "type": "object",
    "properties": {
        "ref_to_count": {
            "$ref": "#Ref"
        },
        "in": {
            "$ref": "#Neighborhood"
            
        },
        "min": {
            "type": "integer"
        },
        "max": {
            "type": "integer"
        }
    }
}

{
    "id": "Ref",
    "type": "object",
    "properties": {
        "state_ref": {
            "$ref": "#StateRef"
        },
        "class_ref": {
            "type": "integer"
            
        }
    }
}

{
    "id": "ClassDefn",
    "type": "object",
    "properties": {
        "class_id": {
            "type": "integer"
        },
        "class_list": {
            "type": "array",
            "items": {
                "$ref": "#ClassDefn"
            }
        },
        "rules": {
            "type": "array",
            "items": {
                "$ref": "#Rule"
            }
        }
    }
}


{
    "id": "Relational",
    "type": "object",
    "properties": {
        "state_ref": {
            "$ref": "#StateRef"
        },
        "class_ref": {
            "$ref": "#Ref"
        }
    }
}


{
    "id": "NbhdDefn",
    "type": "object",
    "properties": {
        "nbhd_id": {
            "type": "integer"
        },
        "rel_cells": {
            "type": "array",
            "items": {
                "$ref": "#Point"
        }
    }
}

{
    "id": "Neighborhood",
    "type": "object",
    "properties": {
        "nbhd_id": {
            "type": "integer"
        },
        "rel_cells": {
            "type": "array",
            "items": {
                "$ref": "#Point"
        }
    }
}

{
    "id": "Point",
    "type": "object",
    "properties": {
        "x": {
            "type": "integer"
        },
        "y": {
            "type": "integer"
        }
    }
}

{
    "title": "CellularAutomaton",
    "type": "object",
    "properties": {
        "states": {
            "type": "array",
            "items": {
                "$ref": "#StateDefn"
            }

        },
        "nbhds": {
            "type": "array",
            "items": {
                "$ref": "#NbhdDefn"
            }
        },
        "classes": {
            "type": "array",
            "items": {
                "$ref": "#ClassDefn"
            }
        }
    }



}